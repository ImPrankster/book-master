/*This is a Next.js page component written in TypeScript that fetches data from a Supabase database and displays it on the page.

The component starts by importing the supabase utility and two other components (InfoCard and Link) from the Next.js framework.

The Home() function is an async function that retrieves data from the book table in the Supabase database by making use of the supabase utility. It retrieves the 9 most recent entries, sorts them by the created_at field in descending order, and stores the data in the data variable. If an error occurs during this process, it throws the error. If no data is returned, it throws an error as well.

The function then retrieves the list of category entries from the category table using the supabase utility. If an error occurs during this process, it throws the error. If no data is returned, it throws an error as well.

The function then returns JSX that contains two sections. The first section displays the most recent entries in the book table using the data variable. It maps through the data array and renders an InfoCard component for each item.

The second section displays a list of categories using the categoryData variable. It maps through the categoryData array and renders a Link component for each category. The Link component navigates to a dynamic category page that is generated by Next.js.

Finally, the Home() function returns the JSX that will be rendered on the page when the component is mounted.*/

import { supabase } from "@/utils/supabase";

import InfoCard from "@/components/InfoCard";
import Link from "next/link";

export default async function Home() {
  //retrive the data
  const { data, error } = await supabase
    .from("book")
    .select("*")
    .order("created_at", { ascending: false })
    .range(0, 9);

  if (error) {
    throw error;
  }

  if (!data) {
    throw new Error("No data found");
  }

  const { data: categoryData, error: categoryError } = await supabase
    .from("category")
    .select("category");

  if (categoryError) {
    throw error;
  }

  if (!categoryData) {
    throw new Error("No data found");
  }

  return (
    <main>
      <article className="w-full text-center">
        <h1 className="text-5xl font-black">Book Master</h1>
        <h2 className="text-2xl font-bold">- A place for all your books -</h2>
      </article>
      <div className="mt-4">
        <label htmlFor="" className="p-5 text-2xl font-bold italic">
          Newly added
        </label>
        <section className="rounded-box grid h-full grid-flow-col space-x-4 overflow-x-auto">
          {data.map((info, i) => (
            <InfoCard data={info} key={i} />
          ))}
        </section>
      </div>
      <div className="mt-8">
        <label htmlFor="" className="p-5 text-2xl font-bold italic">
          Categories
        </label>
        <div className="rounded-box flex h-full flex-wrap justify-center p-4">
          {categoryData.map((entry, i) => {
            if (entry.category) {
              return (
                <Link
                  href={"/categories/" + entry.category.replaceAll(" ", "-")}
                  className="btn-ghost btn"
                  key={i}
                >
                  {entry.category}
                </Link>
              );
            }
          })}
        </div>
      </div>
    </main>
  );
}
